# Local file dataset
# df = pd.read_json(r'the-tate-collection.json')
# df = pd.json_normalize(df['fields'])
# df
# recoloured_image, colour_palette, relative_frequencies = model.generate_colour_palette_from_image("image/A00544.jpg")
# colors = model.generate_colour_palette_from_image("image/A00544.jpg")
# colors

# recoloured_image
# colour_palette[0]
# relative_frequencies

# view image
# im = Image.open(requests.get("https://www.tate.org.uk/art/images/work/T/T08/T08333_10.jpg", stream = True).raw)
# im

# def url_get_int(url): 
#     url = url.split('_')[1]
#     url = url.split('.')[0]
#     return int(url)

# def binary_find_largest(arr):
#     temp_list = arr
#     length = len(temp_list)
#     if len(arr) == 1:
#         return temp_list[0]
#     elif url_get_int(temp_list[length - 1]) >= url_get_int(temp_list[length - 2]):
#         del temp_list[length - 2]
#     elif url_get_int(temp_list[length - 1]) <= url_get_int(temp_list[length - 2]):
#         del temp_list[length - 1]
    
#     return binary_find_largest(temp_list)
    
# def get_best_imageURL(number):
#     url = df['url'][number]
#     accession_number = df['accession_number'][number]
    
#     page = requests.get(url)
#     soup = BeautifulSoup(page.content, 'html.parser')
#     attrs = []
#     page.close()
    
#     for node in soup.findAll('img'):
#         attrs += list(node.attrs.values())
        
#     temp_images = [k for k in attrs if accession_number in k]
    
#     # returns NaN if no image avilable
#     if len(temp_images) == 0:
#         return np.nan
#     else:
#         return binary_find_largest(temp_images)


# new_df = pd.DataFrame(columns = ['img_URL', 'Colour_Palettes'])


# def set_df_img_url_range(start, last):
#     timer = time.process_time()
    
#     for counter in range(start, last + 1):
#         try:
#             url = get_best_imageURL(counter)
#             if url is not np.nan:
#                 savepath = Path("image/"+ str(df["accession_number"][counter]) + ".jpg")
#                 if not savepath.is_file():
#                     urllib.request.urlretrieve(url, savepath)
                
#                 if len(new_df) == counter:
#                     colors = model.generate_colour_palette_from_image(savepath)
#                 elif new_df.loc[counter]['Colour_Palettes'] is np.nan:
#                     colors = model.generate_colour_palette_from_image(savepath)

#                 new_df.loc[counter] = [url, colors]

#             else:
#                 new_df.loc[counter] = [url, np.nan]   

#         except:
#             print(str(counter))
#             counter -= 1
#             continue
    
#     print(time.process_time() - timer)


# set_df_img_url_range(0, 100)

# new_df